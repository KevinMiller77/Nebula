# Alternative GNU Make project makefile autogenerated by Premake

ifndef config
  config=debug
endif

ifndef verbose
  SILENT = @
endif

.PHONY: clean prebuild

SHELLTYPE := posix
ifeq (.exe,$(findstring .exe,$(ComSpec)))
	SHELLTYPE := msdos
endif

# Configurations
# #############################################

RESCOMP = windres
INCLUDES += -isystem NebulaStudio/src -isystem NebulaStudio/src/Nebula -isystem NebulaStudio/include -isystem Nebula -isystem Nebula/ext/imgui -isystem Nebula/ext/yaml-cpp/include -isystem Nebula/include -isystem Nebula/src/Nebula
FORCE_INCLUDE +=
ALL_CPPFLAGS += $(CPPFLAGS) -MMD -MP $(DEFINES) $(INCLUDES)
ALL_RESFLAGS += $(RESFLAGS) $(DEFINES) $(INCLUDES)
LINKCMD = $(CXX) -o "$@" $(OBJECTS) $(RESOURCES) $(ALL_LDFLAGS) $(LIBS)
define PREBUILDCMDS
endef
define PRELINKCMDS
endef
define POSTBUILDCMDS
endef

ifeq ($(config),debug)
TARGETDIR = bin/Debug/linux/NebulaStudio
TARGET = $(TARGETDIR)/NebulaStudio
OBJDIR = bin-int/Debug/linux/NebulaStudio
DEFINES += -D_CRT_SECURE_NO_WARNINGS -DFT2_BUILD_LIBRARY -DGLFW_SUPPLIED -D_LIBS_SUPPLIED -DNEB_DEBUG
ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -g
ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -g -std=c++17
LIBS += bin/Debug/linux/NebulaEngine/libNebulaEngine.a Nebula/ext/glad/bin/Debug/linux/glad/libglad.a Nebula/ext/glfw/bin/Debug/linux/glfw/libglfw.a Nebula/ext/imgui/bin/Debug/linux/imgui/libimgui.a Nebula/ext/yaml-cpp/bin/Debug/linux/yaml-cpp/libyaml-cpp.a -lX11 -lGL -lGLU -ldl -lpthread
LDDEPS += bin/Debug/linux/NebulaEngine/libNebulaEngine.a Nebula/ext/glad/bin/Debug/linux/glad/libglad.a Nebula/ext/glfw/bin/Debug/linux/glfw/libglfw.a Nebula/ext/imgui/bin/Debug/linux/imgui/libimgui.a Nebula/ext/yaml-cpp/bin/Debug/linux/yaml-cpp/libyaml-cpp.a
ALL_LDFLAGS += $(LDFLAGS)

else ifeq ($(config),release)
TARGETDIR = bin/Release/linux/NebulaStudio
TARGET = $(TARGETDIR)/NebulaStudio
OBJDIR = bin-int/Release/linux/NebulaStudio
DEFINES += -D_CRT_SECURE_NO_WARNINGS -DFT2_BUILD_LIBRARY -DGLFW_SUPPLIED -D_LIBS_SUPPLIED -DNEB_RELEASE
ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -O2
ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -O2 -std=c++17
LIBS += bin/Release/linux/NebulaEngine/libNebulaEngine.a Nebula/ext/glad/bin/Release/linux/glad/libglad.a Nebula/ext/glfw/bin/Release/linux/glfw/libglfw.a Nebula/ext/imgui/bin/Release/linux/imgui/libimgui.a Nebula/ext/yaml-cpp/bin/Release/linux/yaml-cpp/libyaml-cpp.a -lX11 -lGL -lGLU -ldl -lpthread
LDDEPS += bin/Release/linux/NebulaEngine/libNebulaEngine.a Nebula/ext/glad/bin/Release/linux/glad/libglad.a Nebula/ext/glfw/bin/Release/linux/glfw/libglfw.a Nebula/ext/imgui/bin/Release/linux/imgui/libimgui.a Nebula/ext/yaml-cpp/bin/Release/linux/yaml-cpp/libyaml-cpp.a
ALL_LDFLAGS += $(LDFLAGS) -s

endif

# Per File Configurations
# #############################################


# File sets
# #############################################

GENERATED :=
OBJECTS :=

GENERATED += $(OBJDIR)/BootLayer.o
GENERATED += $(OBJDIR)/LogPanel.o
GENERATED += $(OBJDIR)/NebulaStudioLayer.o
GENERATED += $(OBJDIR)/NebulaStudioProject.o
GENERATED += $(OBJDIR)/SceneHierarchyPanel.o
GENERATED += $(OBJDIR)/StudioApp.o
OBJECTS += $(OBJDIR)/BootLayer.o
OBJECTS += $(OBJDIR)/LogPanel.o
OBJECTS += $(OBJDIR)/NebulaStudioLayer.o
OBJECTS += $(OBJDIR)/NebulaStudioProject.o
OBJECTS += $(OBJDIR)/SceneHierarchyPanel.o
OBJECTS += $(OBJDIR)/StudioApp.o

# Rules
# #############################################

all: $(TARGET)
	@:

$(TARGET): $(GENERATED) $(OBJECTS) $(LDDEPS) | $(TARGETDIR)
	$(PRELINKCMDS)
	@echo Linking NebulaStudio
	$(SILENT) $(LINKCMD)
	$(POSTBUILDCMDS)

$(TARGETDIR):
	@echo Creating $(TARGETDIR)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(TARGETDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(TARGETDIR))
endif

$(OBJDIR):
	@echo Creating $(OBJDIR)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif

clean:
	@echo Cleaning NebulaStudio
ifeq (posix,$(SHELLTYPE))
	$(SILENT) rm -f  $(TARGET)
	$(SILENT) rm -rf $(GENERATED)
	$(SILENT) rm -rf $(OBJDIR)
else
	$(SILENT) if exist $(subst /,\\,$(TARGET)) del $(subst /,\\,$(TARGET))
	$(SILENT) if exist $(subst /,\\,$(GENERATED)) rmdir /s /q $(subst /,\\,$(GENERATED))
	$(SILENT) if exist $(subst /,\\,$(OBJDIR)) rmdir /s /q $(subst /,\\,$(OBJDIR))
endif

prebuild: | $(OBJDIR)
	$(PREBUILDCMDS)

ifneq (,$(PCH))
$(OBJECTS): $(GCH) | $(PCH_PLACEHOLDER)
$(GCH): $(PCH) | prebuild
	@echo $(notdir $<)
	$(SILENT) $(CXX) -x c++-header $(ALL_CXXFLAGS) -o "$@" -MF "$(@:%.gch=%.d)" -c "$<"
$(PCH_PLACEHOLDER): $(GCH) | $(OBJDIR)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) touch "$@"
else
	$(SILENT) echo $null >> "$@"
endif
else
$(OBJECTS): | prebuild
endif


# File Rules
# #############################################

$(OBJDIR)/NebulaStudioProject.o: NebulaStudio/src/Base/NebulaStudioProject.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/BootLayer.o: NebulaStudio/src/Layers/BootLayer.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/NebulaStudioLayer.o: NebulaStudio/src/Layers/NebulaStudioLayer.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/LogPanel.o: NebulaStudio/src/Panels/LogPanel.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/SceneHierarchyPanel.o: NebulaStudio/src/Panels/SceneHierarchyPanel.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/StudioApp.o: NebulaStudio/src/StudioApp.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"

-include $(OBJECTS:%.o=%.d)
ifneq (,$(PCH))
  -include $(PCH_PLACEHOLDER).d
endif